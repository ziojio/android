// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: "config.gradle"

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        addRepos(repositories)
    }

    gradle.projectsEvaluated {
        // tasks.withType(JavaCompile) {
        //     options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        // }

        tasks.withType(Javadoc) {

        }
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

rootProject.buildDir = rootDir.parentFile.absolutePath + "/" + project.name + ".build"

subprojects {
    buildDir = rootProject.buildDir.absolutePath + "/" + project.name

    pluginManager.withPlugin("java-library") {
        println "------------------------------ withPlugin java-library start --------------------------"
        println "------------------------------ withPlugin java-library  end  --------------------------"
    }
    def androidPluginId = ["com.android.library", "com.android.application"]
    for (String id : androidPluginId) {
        println "------------------------------ " + project.name + " withPlugin " + id + " --------------------------"
        // 在 module build.gradle 可以被覆写
        pluginManager.withPlugin(id) {
            println "------------------------------ withPlugin " + it.id + " start --------------------------"
            android {
                compileSdkVersion android_config.compileSdkVersion
                buildToolsVersion android_config.buildToolsVersion
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                defaultConfig {
                    minSdkVersion android_config.minSdkVersion
                    targetSdkVersion android_config.targetSdkVersion
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }
            }

            dependencies {
                // AndroidX
                implementation "androidx.appcompat:appcompat:1.2.0"
                // Test tools, 给所有 module 加上 test dependency
                testImplementation 'junit:junit:4.12'
                androidTestImplementation 'androidx.test:runner:1.3.0'
                androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
                // 可能使用 lombok
                compileOnly deps.lombok
                annotationProcessor deps.lombokProcessor
            }
            // loggerMarginStr( android.properties)
            println "------------------------------ withPlugin " + it.id + "  end  --------------------------"
        }
    }

    afterEvaluate {
        // module build.gradle 最后的结果可以在这里修改
        if (plugins.hasPlugin(com.android.build.gradle.AppPlugin) || plugins.hasPlugin(com.android.build.gradle.LibraryPlugin)) {
            println "------------------------------ afterEvaluate hasPlugin AppPlugin or LibraryPlugin start --------------------------"
            // loggerMarginStr(android.properties)
            println "------------------------------ afterEvaluate hasPlugin AppPlugin or LibraryPlugin  end   --------------------------"
        }
        if (plugins.hasPlugin(JavaLibraryPlugin)) {
            println "------------------------------ afterEvaluate hasPlugin JavaLibraryPlugin start --------------------------"
            println "------------------------------ afterEvaluate hasPlugin JavaLibraryPlugin  end  --------------------------"
        }
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}


def loggerMarginStr(value) {
    println "---------------------------------------------------------------------------------------"
    if (value instanceof Map || value instanceof Collection) {
        value.forEach({ x, y -> println "[ " + x + " : " + y + " ]" })
    } else {
        println value
    }
    println "---------------------------------------------------------------------------------------"
}